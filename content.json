{"meta":{"title":"南方之林","subtitle":"","description":"","author":"Kristy Zhang","url":"https://kristyzhangwx.github.io","root":"/"},"posts":[{"tags":[{"name":"hexo","slug":"hexo","permalink":"https://kristyzhangwx.github.io/tags/hexo/"}],"title":"这是一篇用HexoEditor新建的文章","date":"2022/09/03","text":"如题，试一试，感觉不是特别方便，经常会失灵，只能打开图床网站上传后复制链接才行。 如果能做到直接复制到项目文件夹里就好了","permalink":"https://kristyzhangwx.github.io/2022/09/03/%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E7%94%A8HexoEditor%E6%96%B0%E5%BB%BA%E7%9A%84%E6%96%87%E7%AB%A0/","photos":[]},{"tags":[{"name":"备忘录","slug":"备忘录","permalink":"https://kristyzhangwx.github.io/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"}],"title":"备忘录","date":"2022/09/02","text":"BLOG TO DO LIST 增加评论 增加访问量统计、文章阅读量 增加文章点赞功能 代码高亮 增加点击效果 文章结束语 增加音乐播放器 增加字数统计 添加hexo文章编辑服务 STUDY TO DO LIST 从头开始研究pdf文件解析 从头开始研究可视化 从头开始研究协同算法 零基础入门开发一个ios/android客户端 重学数据结构和算法 零基础入门搭建一个分布式web服务 坚持睡前阅读 学无涯而生有涯，量力而行","permalink":"https://kristyzhangwx.github.io/2022/09/02/%E5%A4%87%E5%BF%98%E5%BD%95/","photos":[]},{"tags":[{"name":"从零系列","slug":"从零系列","permalink":"https://kristyzhangwx.github.io/tags/%E4%BB%8E%E9%9B%B6%E7%B3%BB%E5%88%97/"}],"title":"重学数据结构和算法（一）","date":"2022/09/02","text":"挖个坑在这里","permalink":"https://kristyzhangwx.github.io/2022/09/02/%E9%87%8D%E5%AD%A6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/","photos":[]},{"tags":[{"name":"从零系列","slug":"从零系列","permalink":"https://kristyzhangwx.github.io/tags/%E4%BB%8E%E9%9B%B6%E7%B3%BB%E5%88%97/"}],"title":"零基础入门开发一个ios客户端（一）","date":"2022/09/02","text":"挖个坑在这里","permalink":"https://kristyzhangwx.github.io/2022/09/02/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAios%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%88%E4%B8%80%EF%BC%89/","photos":[]},{"tags":[{"name":"从零系列","slug":"从零系列","permalink":"https://kristyzhangwx.github.io/tags/%E4%BB%8E%E9%9B%B6%E7%B3%BB%E5%88%97/"}],"title":"从头开始研究可视化（一）","date":"2022/09/02","text":"挖个坑在这里","permalink":"https://kristyzhangwx.github.io/2022/09/02/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E7%A0%94%E7%A9%B6%E5%8F%AF%E8%A7%86%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/","photos":[]},{"tags":[{"name":"从零系列","slug":"从零系列","permalink":"https://kristyzhangwx.github.io/tags/%E4%BB%8E%E9%9B%B6%E7%B3%BB%E5%88%97/"}],"title":"从头开始研究协同算法（一）","date":"2022/09/02","text":"挖个坑在这里","permalink":"https://kristyzhangwx.github.io/2022/09/02/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E7%A0%94%E7%A9%B6%E5%8D%8F%E5%90%8C%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/","photos":[]},{"tags":[{"name":"从零系列","slug":"从零系列","permalink":"https://kristyzhangwx.github.io/tags/%E4%BB%8E%E9%9B%B6%E7%B3%BB%E5%88%97/"},{"name":"pdf","slug":"pdf","permalink":"https://kristyzhangwx.github.io/tags/pdf/"}],"title":"从头开始研究pdf文件解析（一）","date":"2022/09/02","text":"挖个坑在这里","permalink":"https://kristyzhangwx.github.io/2022/09/02/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E7%A0%94%E7%A9%B6pdf%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"https://kristyzhangwx.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"style","slug":"style","permalink":"https://kristyzhangwx.github.io/tags/style/"},{"name":"布局","slug":"布局","permalink":"https://kristyzhangwx.github.io/tags/%E5%B8%83%E5%B1%80/"}],"title":"前端布局方案对比","date":"2022/09/02","text":"一、传统布局方案（静态布局）（国内PC端使用度比较多的布局方案）1. 特点： a）所有元素尺寸使用px作为单位 b）不管浏览器尺寸多少，一律按照固定尺寸布局显示 c）有最小宽度，设置了min-width，浏览器可视范围小于这个宽度会出现滚动条，大于这个范围部分加背景显示 d）pc端比较常见 2. 设计方法： a）PC端：居中布局，所有样式使用绝对宽度和高度（px），使用横向和竖向的滚动条来查阅被遮掩部分 b) 移动设备：移动端单独一套代码，布局，使用不同的域名或者path ① 在viewport meta标签上设置width=320，页面的各个元素也采用px作为单位。通过用JS动态修改标签的initial-scale使得页面等比缩放，从而刚好占满整个屏幕。 ② 设在viewport meta标签上设置content”width=640,user-scalable=no”，页面的各个元素也采用px作为单位。由于640px超出了手机宽度，浏览器会自动缩小页面至刚好全屏。 3. 优点： a) 简单，兼容性问题少（pc端） b) PC端在时间紧凑下最不容易出错的方案，开发速度快，市面上大部分的门户网站采用了这种布局方式（我们公司也是） 4. 缺点： a）不能根据用户的屏幕尺寸做出不同的表现 b) 移动viewport设置存在兼容性问题 5. 参考网站 a) 网易云音乐 b) 永中PDF工具集（我们部门大部分官网门户网站均采用这种静态布局的方案） c) 移动端方案有兼容性问题，可参考的例子很难找了（没找到），老版的淘宝是采用的这种方案 二、流式布局（用的比较少）1. 特点： a） 按照页面元素的宽度根据屏幕分辨率进行适配调整，但是整体布局不变。（栅栏系统，网格系统），屏幕分辨率变化时，页面里元素的大小会变化而但布局不变。 b）网页中主要的划分区域的尺寸使用百分数（搭配min-、max-属性使用），例如，设置网页主体的宽度为80%，min-width为960px。图片也作类似处理（width:100%, max-width一般设定为图片本身的尺寸，防止被拉伸而失真）2. 设计方法： a) 使用%百分比定义宽度，高度大都是用px来固定住 b) 可以根据可视区域 (viewport) 和父元素的实时尺寸进行调整，尽可能的适应各种分辨率。 c) 配合 max-width/min-width 等属性控制尺寸流动范围以免过大或者过小影响阅读。3. 优点 a) 早期屏幕尺寸比较单一，现在这种布局方式已经没有什么优点了4. 缺点 a) 果屏幕尺度跨度太大，那么在相对其原始设计而言过小或过大的屏幕上不能正常显示,宽度使用%百分比定义，但是高度和文字大小等大都是用px来固定，所以在大屏幕的手机下显示效果会变成有些页面元素宽度被拉的很长，但是高度、文字大小还是和原来一样（即，这些东西无法变得“流式”），显示非常不协调。5. 参考网站 a) 亚马逊的移动网站 https://www.amazon.cn/ b) 携程移动网站 https://m.ctrip.com/html5/?sourceid=497&amp;allianceid=4897&amp;sid=182042 三、响应式布局（常见于门户网站，宣传网站）1. 特点 a) 每个屏幕分辨率下面会有一个布局样式，即元素位置和大小都会变。2. 设计方法 a) 媒体查询+弹性布局+流式布局。使用 @media 媒体查询 ,弹性布局和网格系统 (Grid System) 配合相对布局单位进行布局，实际上就是综合响应式、流动等上述技术通过 CSS 给单一网页不同设备返回不同样式的技术统称。3. 优点 a) 适应pc和移动端，如果足够耐心，效果完美4. 缺点 a) 媒体查询是有限的，也就是可以枚举出来的，只能适应主流的宽高。 b) 要匹配足够多的屏幕大小，工作量不小，设计也需要多个版本。(简而言之，可以完美，但是需要花时间）。5. 参考网站： a）bootstrap官网 b）https://thenextweb.com/ c）https://mediaqueri.es/ 这个网站收录了很多国外的响应式布局网站，有时间可以欣赏欣赏 d）https://zhuanlan.zhihu.com/p/60091235 （可以对比分析一下国内10大前端团队网站各采用了什么样的布局方案） 四、弹性布局（rem/em 移动端比较受欢迎，大部分移动h5网站采用这种方案)1. 特点 a) 包裹文字的各元素的尺寸采用em或者rem做单位，而页面的主要划分区域的尺寸仍使用百分数或px做单位（同「流式布局」或「固定布局」），em是相对于父元素的单位，用的比较少，rem相对于根元素的单位，简单明了好用，是主流. b）依照某特定宽度设定 rem 值（即 html 的 font-size），页面任何需要弹性适配的元素，尺寸均换算为 rem 进行布局；当页面渲染时，根据页面有效宽度进行计算，调整 rem 的大小，动态缩放以达到适配的效果。2. 设计方法 a) 屏幕宽度pwidth/设计稿宽度pwidth*换算标准prem 作为根元素的font-size大小（则prem为1rem）其余尺寸都除以prem换算成remfunction getRem(pwidth, prem) { var html = document.getElementsByTagName('html')[0]; var oWidth = document.body.clientWidth || document.documentElement.clientWidth; html.style.fontSize = (oWidth / pwidth) * prem + 'px'; } getRem(750, 100); 3. 优点 a) 计算简单，换算统一，开发起来比较便捷 b)移动端是一个不错的选择 4. 缺点 a）1px的问题：dpr=1时没有任何问题，但是在dpr=2或者更高的手机屏幕上，因为物理像素的增加，存在小于1px的显示空间。如果采用第一种方法，因为它统一对scale设置为1，那么我们假如想要实现0.5px, 就只能通过transform的方式。（或者也可以通过改变viewport 的 scale的值解决这个问题，如果考虑简便性的话，还是推荐采用transform去实现） b）内容网站不太适合，剥夺了用户调整字体大小的权利 c) 现在已经有了更适合移动端计算单位 vw,vh(opera不支持，有兼容性问题）5. 参考网站 a) 淘宝触屏版 选择合适的布局需要看项目性质和开发周期 如果开发周期充裕且开发的网站为门户类网站（官网，宣传页），最佳方案 多个尺寸版本设计稿+响应式布局。（精工细活） 如果门户类网站开发周期短的话，比如先保证PC网站快速上线，那么PC采用静态布局（弹性布局，选其一）+少量媒体查询的方案是效率最高的。 移动端想要呈现完美效果，建议和PC分离成两个版本，只需要保证主流的浏览器版本的话，可以大胆采用vw，vh的方案。保守起见的话采用rem的方案。 功能性网站（浏览器同宽同高的单页应用，例如网盘项目优云）建议PC端和h5端分开写两套模板，pc推荐采用静态布局+少量媒体查询的方案，移动端采用rem方案（如果采用rem方案的话，窗口resize会造成页面元素视觉变化太大，不是很友好）","permalink":"https://kristyzhangwx.github.io/2022/09/02/%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94/","photos":[]},{"tags":[{"name":"从零系列","slug":"从零系列","permalink":"https://kristyzhangwx.github.io/tags/%E4%BB%8E%E9%9B%B6%E7%B3%BB%E5%88%97/"},{"name":"electron","slug":"electron","permalink":"https://kristyzhangwx.github.io/tags/electron/"},{"name":"前端","slug":"前端","permalink":"https://kristyzhangwx.github.io/tags/%E5%89%8D%E7%AB%AF/"}],"title":"从无到有开发electron+react+typescript桌面客户端（一）","date":"2022/09/01","text":"新建项目 新建 mkdir desk-annual-lottery cd desk-annual-lotterynpm initnpm install electron --save-dev //汗 公司的网络这一步就失败了，咋也装不上 eletron安装失败的解决方案新建.npmrc文件，添加一行配置 electron_mirror=https://npm.taobao.org/mirrors/electron/ 重新执行electron的安装命令 亲测有效 继续 mkdir web //用于放置前端相关代码mkdir app //electron的//用自己想要的脚手架创建一个web 模板应用，这里我用的umicd webnpx @umijs/create-umi-app //报错的话就先安装一下 npm i @umijs/create-umi-app -gnpm install cd app 编写app代码，创建main.ts import {app, BrowserWindow} from 'electron';import path from 'path';let mainWindow: Electron.BrowserWindow;/** * */function createWindow(): void { // Create the browser window. mainWindow = new BrowserWindow({ height: 600, webPreferences: { preload: path.join(__dirname, 'preload.js'), }, width: 800, }); // and load the index.html of the app. mainWindow.loadFile(path.join(__dirname, '../html/index.html')); // Open the DevTools. mainWindow.webContents.openDevTools(); // Emitted when the window is closed. mainWindow.on('closed', () =&gt; { // Dereference the window object, usually you would store windows // in an array if your app supports multi windows, this is the time // when you should delete the corresponding element. mainWindow = null as any; });}// This method will be called when Electron has finished// initialization and is ready to create browser windows.// Some APIs can only be used after this event occurs.app.on('ready', createWindow);// Quit when all windows are closed.app.on('window-all-closed', () =&gt; { // On OS X it is common for applications and their menu bar // to stay active until the user quits explicitly with Cmd + Q if (process.platform !== 'darwin') { app.quit(); }});app.on('activate', () =&gt; { // On OS X it\"s common to re-create a window in the app when the // dock icon is clicked and there are no other windows open. if (mainWindow === null) { createWindow(); }});// In this file you can include the rest of your app\"s specific main process// code. You can also put them in separate files and require them here. 创建preload.ts // All of the Node.js APIs are available in the preload process.// It has the same sandbox as a Chrome extension.window.addEventListener(\"DOMContentLoaded\", () =&gt; { const replaceText = (selector: string, text: string) =&gt; { const element = document.getElementById(selector); if (element) { element.innerText = text; } }; for (const type of [\"chrome\", \"node\", \"electron\"]) { replaceText(`${type}-version`, (process.versions as any)[type]); } }); 返回根目录，创建tsconfig.json { \"compilerOptions\": { \"target\": \"esnext\", \"module\": \"commonjs\", \"moduleResolution\": \"node\", \"resolveJsonModule\": true, \"importHelpers\": true, \"esModuleInterop\": true, \"sourceMap\": true, \"baseUrl\": \"./\", \"strict\": true, \"paths\": { \"*\": [\"node_modules/*\"] }, \"allowSyntheticDefaultImports\": true, \"outDir\": \"./dist\", }, \"include\": [ \"app/**/*\" ], } package.json添加script命令 \"scripts\": { \"build\": \"tsc\", \"watch\": \"tsc -w\", \"start\": \"npm run build &amp;&amp; electron ./dist/main.js\"}, 根目录创建html文件夹（先测试以下运行），进入文件夹创建index.html页面 &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;年会抽奖&lt;/title&gt;&lt;/head&gt;&lt;body&gt; 测试&lt;/body&gt;&lt;/html&gt; 运行 npm start//如果运行失败，提示缺少什么库，npm 装一下，再重新运行程序启动如图 将开发环境中引入的html页面替换成web中的页面,相对来说还是比较简单的 // mainWindow.loadFile(path.join(__dirname, '../html/index.html'));mainWindow.loadURL('http://localhost:8000/'); 调试网页端的调试就不多说了，主要讲一下electron的debug官网上有案例，直接复制过来.vscode目录下新建launch.json { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Debug Main Process\", \"type\": \"node\", \"request\": \"launch\", \"cwd\": \"${workspaceFolder}\", \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron\", \"windows\": { \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron.cmd\" }, \"args\": [\".\"] } ]} 在代码里需要debug的地方输入debuggerF5开始调试代码 区分当前环境package.json \"scripts\": { \"dev\": \"set NODE_ENV=development &amp;&amp; tsc &amp;&amp; electron ./build/main.js\", \"build\": \"set NODE_ENV=production &amp;&amp; tsc\", \"pro\": \"npm run build &amp;&amp; electron ./build/main.js\" }, main.ts ...const node_env = process.env.NODE_ENV;...if (node_env === 'development') { mainWindow.loadURL('http://localhost:8000/');} else { //web中.umirc.ts中设置 outputPath: '../dist', mainWindow.loadFile(path.join(__dirname, '../dist/index.html'));}... 这里生产环境会有几个问题 本地资源不做额外开发不支持browser模式，故将.umirc中的history type改为hash路由. web打包以后的路径会引用不到资源，是因为静态资源路径错误，publicPath改为相对路径 history: { type: 'hash',},publicPath: './', 到此为止，一个简单的开发版本已经完成，下一篇会介绍打包成客户端的步骤","permalink":"https://kristyzhangwx.github.io/2022/09/01/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAelectron-react-typescript%E6%A1%8C%E9%9D%A2%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%88%E4%B8%80%EF%BC%89/","photos":[]},{"tags":[{"name":"随记","slug":"随记","permalink":"https://kristyzhangwx.github.io/tags/%E9%9A%8F%E8%AE%B0/"}],"title":"2022-8-31","date":"2022/08/31","text":"桃李春风一杯酒，江湖夜雨十年灯","permalink":"https://kristyzhangwx.github.io/2022/08/31/2022-8-31/","photos":[]},{"tags":[{"name":"随记","slug":"随记","permalink":"https://kristyzhangwx.github.io/tags/%E9%9A%8F%E8%AE%B0/"}],"title":"2020-11-15","date":"2020/11/15","text":"清醒，自律，知进退，明得失。不妄自尊大，要相信自己。 口号喊得最响的人，往往是行动力最差的人。","permalink":"https://kristyzhangwx.github.io/2020/11/15/2020-11-15/","photos":[]},{"tags":[{"name":"随记","slug":"随记","permalink":"https://kristyzhangwx.github.io/tags/%E9%9A%8F%E8%AE%B0/"}],"title":"2020-9-14","date":"2020/09/14","text":"我们总是善于不停的开始，换个新日记本，换个新手机，换个新电脑，换个新工作，换个新环境，却不知道如何去好好经营自己当下所拥有的。","permalink":"https://kristyzhangwx.github.io/2020/09/14/2020-9-14/","photos":[]},{"tags":[{"name":"随记","slug":"随记","permalink":"https://kristyzhangwx.github.io/tags/%E9%9A%8F%E8%AE%B0/"}],"title":"2020-9-13","date":"2020/09/13","text":"闲而无事,又来鼓捣博客。","permalink":"https://kristyzhangwx.github.io/2020/09/13/2020-5-24/","photos":[]}],"categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://kristyzhangwx.github.io/tags/hexo/"},{"name":"备忘录","slug":"备忘录","permalink":"https://kristyzhangwx.github.io/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"},{"name":"从零系列","slug":"从零系列","permalink":"https://kristyzhangwx.github.io/tags/%E4%BB%8E%E9%9B%B6%E7%B3%BB%E5%88%97/"},{"name":"pdf","slug":"pdf","permalink":"https://kristyzhangwx.github.io/tags/pdf/"},{"name":"前端","slug":"前端","permalink":"https://kristyzhangwx.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"style","slug":"style","permalink":"https://kristyzhangwx.github.io/tags/style/"},{"name":"布局","slug":"布局","permalink":"https://kristyzhangwx.github.io/tags/%E5%B8%83%E5%B1%80/"},{"name":"electron","slug":"electron","permalink":"https://kristyzhangwx.github.io/tags/electron/"},{"name":"随记","slug":"随记","permalink":"https://kristyzhangwx.github.io/tags/%E9%9A%8F%E8%AE%B0/"}]}